{"version":3,"file":"static/js/419.49878366.chunk.js","mappings":"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","sources":["helpers/actions.js","pages/cart_page/index.js"],"sourcesContent":["const getProducts = (productSet, products) => {\n  const result = productSet.map(({ productId, count }) => {\n    const selectedProduct = products.find(product => product.productId === productId);\n    return ({ cartProduct: selectedProduct, count });\n  });\n  \n  return result;\n}\n\nexport default getProducts;","/* eslint-disable react/jsx-no-useless-fragment */\nimport { useState, useEffect, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { CartCard, ReccomendedCard, Loader } from '../../components';\nimport useCheckCount from '../../helpers/hooks'\nimport getProducts from '../../helpers/actions';\n\n\nconst CartPage = () => {\n  const { products } = useSelector(state => state.products);\n  const cartProductSet = useSelector(state => state.cart.cart);\n  const [cartProducts, setCartProducts] = useState(null);\n  const [recommendedProducts, setRecommendedProducts] = useState([]);\n  const { cartProductCount: { totalPrice} } = useCheckCount();\n  const totalCartPrice = useMemo(() => totalPrice.toFixed(2).toString().split('.'), [totalPrice]);\n  const navigate = useNavigate();\n\n  const goToConfirmationPage = () => {\n    navigate('/confirm', { state: { cartProducts, totalCartPrice } });\n  }\n  \n  useEffect(() => {\n    const selectedProducts = getProducts(cartProductSet, products);\n    setCartProducts(selectedProducts);\n  }, [cartProductSet, products])\n\n  useEffect(() => {\n    if(products[1]) {\n      const randomIds = new Array(4).fill(0).map(() => Math.floor(Math.random() * products.length));\n      const recommended = products.filter((item, ind) => randomIds.includes(ind));\n      setRecommendedProducts(recommended);\n    }\n  }, [products])\n\n  return ( \n    <>\n      {cartProducts ? (<div className=\"cart_page\">\n        <div className=\"cart_list\">\n        {cartProducts?.length > 0 \n          ? (\n            <>\n              <div className=\"cart_list__header\">\n                <p className=\"cart_title\">Shopping Cart</p>\n                <span className=\"cart_selected\">No items selected.</span>\n                <button type=\"button\" className=\"cart_button--selected\" onClick={() => {}}>\n                  Select all items\n                </button>\n              </div>\n              <div className=\"cart_list__body\">\n                {cartProducts.map(({ cartProduct, count }) => (\n                  <div key={cartProduct.productId + new Date().toString}>\n                    <CartCard \n                      cartProduct={cartProduct} \n                      count={count} \n                    />\n                    <div className=\"cart_list__divider\" />\n                  </div>\n                ))}\n                <div className='cart_list__subtotal'>\n                  <span className=\"checkout_text\">\n                    Subtotal\n                  </span>\n                  <span aria-hidden=\"true\">\n                    <span className=\"checkout_price__symbol\">$</span>\n                    <span className=\"checkout_price__whole\">{totalCartPrice[0]}</span>\n                    <span className=\"checkout_price__fraction\">{totalCartPrice[1] ? totalCartPrice[1] : '00'}</span>\n                  </span>\n                </div>\n              </div>\n            </>\n          ) : (<p className='cart_list__empty'>Your Cart is empty</p>)  \n        } \n        </div>\n        <div className=\"cart_checkout\">\n          <span className=\"checkout_text\">\n            Subtotal\n          </span>\n          <span aria-hidden=\"true\">\n            <span className=\"checkout_price__symbol\">$</span>\n            <span className=\"checkout_price__whole\">{totalCartPrice[0]}</span>\n            <span className=\"checkout_price__fraction\">{totalCartPrice[1] ? totalCartPrice[1]: '00'}</span>\n          </span>\n          <button type=\"button\" className=\"cart_button--checkout\" onClick={() => {goToConfirmationPage()}}>\n            Proceed to checkout\n          </button>    \n        </div>\n        <div className=\"cart_recommend\">\n          <p className=\"cart_recommend__title\">\n            Products related to items in your cart\n          </p>\n          <div className=\"cart_recommend__list\">\n            {recommendedProducts?.map((product) => ( \n              <div key={product.productId}>\n                <ReccomendedCard \n                  good={product} \n                />\n                <div className='cart_recommend__divider' />\n              </div>\n            ))}\n          </div> \n        </div>\n      </div>) : (<Loader />)}\n    </>\n  )\n}\n\nexport default CartPage;"],"names":["productSet","products","map","productId","count","cartProduct","find","product","useSelector","state","cartProductSet","cart","useState","cartProducts","setCartProducts","recommendedProducts","setRecommendedProducts","totalPrice","useCheckCount","cartProductCount","totalCartPrice","useMemo","toFixed","toString","split","navigate","useNavigate","useEffect","selectedProducts","getProducts","randomIds","Array","fill","Math","floor","random","length","recommended","filter","item","ind","includes","className","type","onClick","Date","good"],"sourceRoot":""}